package parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;
import lexer.MPLexer;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\013\000\002\002\004\000\002\002" +
    "\013\000\002\002\012\000\002\002\007\000\002\002\004" +
    "\000\002\002\007\000\002\003\003\000\002\004\005\000" +
    "\002\004\003\000\002\004\005\000\002\005\004\000\002" +
    "\005\004\000\002\010\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\005\000\002\011\010\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\004\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\015\003\000\002\015\003\000\002\016\015\000" +
    "\002\016\011\000\002\017\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\004\005\001\002\000\004\002\120\001" +
    "\002\000\006\003\006\031\007\001\002\000\004\002\ufffc" +
    "\001\002\000\004\023\010\001\002\000\004\026\011\001" +
    "\002\000\010\003\016\005\020\006\014\001\002\000\006" +
    "\002\ufffb\025\027\001\002\000\010\002\ufff8\025\ufff8\035" +
    "\ufff8\001\002\000\006\003\ufff2\012\ufff2\001\002\000\006" +
    "\003\026\012\025\001\002\000\004\002\ufffd\001\002\000" +
    "\010\002\ufffa\025\ufffa\035\021\001\002\000\006\003\ufff3" +
    "\012\ufff3\001\002\000\010\003\023\005\020\006\014\001" +
    "\002\000\010\002\ufff9\025\ufff9\035\ufff9\001\002\000\010" +
    "\002\ufff7\025\ufff7\035\ufff7\001\002\000\010\002\ufff6\025" +
    "\ufff6\035\ufff6\001\002\000\010\002\ufff4\025\ufff4\035\ufff4" +
    "\001\002\000\010\002\ufff5\025\ufff5\035\ufff5\001\002\000" +
    "\004\030\031\001\002\000\006\003\114\024\115\001\002" +
    "\000\014\007\043\010\033\012\044\013\045\030\042\001" +
    "\002\000\004\027\113\001\002\000\006\012\044\013\045" +
    "\001\002\000\020\003\101\014\053\015\052\016\055\017" +
    "\054\020\102\033\051\001\002\000\004\027\uffed\001\002" +
    "\000\004\027\uffeb\001\002\000\004\027\uffec\001\002\000" +
    "\004\027\uffea\001\002\000\004\027\uffef\001\002\000\014" +
    "\007\043\010\033\012\044\013\045\030\042\001\002\000" +
    "\006\012\044\013\045\001\002\000\024\003\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\027\uffe0\030\uffe0\033" +
    "\uffe0\001\002\000\024\003\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\027\uffe1\030\uffe1\033\uffe1\001\002\000" +
    "\004\027\uffee\001\002\000\004\033\063\001\002\000\014" +
    "\014\053\015\052\016\055\017\054\033\051\001\002\000" +
    "\006\012\044\013\045\001\002\000\006\012\044\013\045" +
    "\001\002\000\006\012\044\013\045\001\002\000\006\012" +
    "\044\013\045\001\002\000\006\012\044\013\045\001\002" +
    "\000\010\027\uffe5\030\uffe5\033\uffe5\001\002\000\010\027" +
    "\uffe3\030\uffe3\033\uffe3\001\002\000\010\027\uffe6\030\uffe6" +
    "\033\uffe6\001\002\000\010\027\uffe4\030\uffe4\033\uffe4\001" +
    "\002\000\010\027\uffe2\030\uffe2\033\uffe2\001\002\000\006" +
    "\012\044\013\045\001\002\000\004\030\065\001\002\000" +
    "\014\007\043\010\033\012\044\013\045\030\042\001\002" +
    "\000\004\027\067\001\002\000\006\027\uffde\036\070\001" +
    "\002\000\004\030\071\001\002\000\014\007\043\010\033" +
    "\012\044\013\045\030\042\001\002\000\004\027\073\001" +
    "\002\000\004\027\uffdf\001\002\000\004\027\075\001\002" +
    "\000\006\027\ufff1\030\076\001\002\000\014\007\043\010" +
    "\033\012\044\013\045\030\031\001\002\000\004\027\100" +
    "\001\002\000\004\027\ufff0\001\002\000\004\027\uffe7\001" +
    "\002\000\006\012\044\013\045\001\002\000\004\027\uffe9" +
    "\001\002\000\016\014\053\015\052\016\055\017\054\027" +
    "\uffe8\033\051\001\002\000\004\033\106\001\002\000\006" +
    "\012\044\013\045\001\002\000\004\030\110\001\002\000" +
    "\014\007\043\010\033\012\044\013\045\030\042\001\002" +
    "\000\004\027\112\001\002\000\004\027\uffdd\001\002\000" +
    "\010\003\ufff1\024\ufff1\027\ufff1\001\002\000\004\002\ufffe" +
    "\001\002\000\006\003\117\032\116\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\011\004\016\005\012\006\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\021\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\027\001\001" +
    "\000\002\001\001\000\022\007\034\011\031\012\040\013" +
    "\045\014\037\015\033\016\036\017\035\001\001\000\002" +
    "\001\001\000\006\014\104\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\034\011" +
    "\073\012\040\013\045\014\037\015\033\016\036\017\035" +
    "\001\001\000\006\014\046\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\061\001\001\000\004\015" +
    "\060\001\001\000\004\015\057\001\001\000\004\015\056" +
    "\001\001\000\004\015\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\063\015\047\001\001\000\002\001" +
    "\001\000\022\007\034\011\065\012\040\013\045\014\037" +
    "\015\033\016\036\017\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\034\011\071" +
    "\012\040\013\045\014\037\015\033\016\036\017\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\034\012\076\013\045\014" +
    "\037\015\033\016\036\017\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\102\015" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\106\015\047\001\001\000\002\001" +
    "\001\000\022\007\034\011\110\012\040\013\045\014\037" +
    "\015\033\016\036\017\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   parser parser = new parser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
          e.printStackTrace();
		   System.out.println(e);
	  }
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM begin OV MZ DeclarationBlock VZ Block ZV end 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 1 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM begin OV MZ DeclarationBlock VZ Block ZV error 
            {
              Object RESULT =null;
		
               System.out.println("Nedostaje end na kraju programa ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM begin OV MZ DeclarationBlock VZ Block error 
            {
              Object RESULT =null;
		
              System.out.println("Nedostaje } na kraju programa ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM begin OV MZ error 
            {
              Object RESULT =null;
		
             System.out.println("Nedostaje vz");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROGRAM error 
            {
              Object RESULT =null;
		
             System.out.println("Nedostaje BEGIN");
             System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= PROGRAM begin OV MZ DeclarationBlock 
            {
              Object RESULT =null;
		
                System.out.println("Nedostaje Zatvorena zagrada kod deklaracionog bloka");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationBlock ::= Declarations 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 2 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationBlock",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declarations ::= Declarations COMMA Declaration 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 3 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declarations ::= Declaration 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 4 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declarations ::= Declarations COMMA error 
            {
              Object RESULT =null;
		
                System.out.println("Zarezu tu nije mesto");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= Type Name 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 5 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= Type error 
            {
              Object RESULT =null;
		
                System.out.println("Nedostaje Ime promenjive");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Name ::= ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 6 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Name",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 8 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 9 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Block ::= OPEN Instructions CLOSE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 10 ");
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instructions ::= OPEN Instructions CLOSE OPEN Instruction CLOSE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 11 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instructions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instructions ::= Instruction 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 12 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instructions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= Assign 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 13 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= Block 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 14 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruction ::= If 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 15 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruction ::= While 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 16 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruction ::= Function 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija o smeni 17");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assign ::= Const ASSIGN Function 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 18 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assign ::= Const ASSIGN Const 
            {
              Object RESULT =null;
		
               System.out.println("Redukcija po smeni 19 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Assign ::= Const error 
            {
              Object RESULT =null;
		
                System.out.println("Losa dodela");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= Const PLUS Const 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 20 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Function ::= Const MINUS Const 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 21 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Function ::= Const MULTIPLICATION Const 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 22 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Function ::= Const DIVISION Const 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 23 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Function ::= Const EQUALS Const 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 24 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Const ::= CONST 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 25 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Const ::= ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 26 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // If ::= IF Function EQUALS Function OPEN Instructions CLOSE ELSE OPEN Instructions CLOSE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 27 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If ::= IF Function EQUALS Function OPEN Instructions CLOSE 
            {
              Object RESULT =null;
		
                System.out.println("Resukcija po smeni 28");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // While ::= WHILE Function EQUALS Function OPEN Instructions CLOSE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 29 ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
